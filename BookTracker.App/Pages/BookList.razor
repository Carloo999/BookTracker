@page "/BookList"
@page "/BookList/{Username}"
@using Microsoft.AspNetCore.Identity
@using BookTracker.App.Models
@using System.Security.Claims
@using BookTracker.App.Data
@using Microsoft.EntityFrameworkCore

@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject ApplicationDbContext DbContext

@if (!Result)
{
    <h1>No User was found or profile is set to private</h1>
}

else
{
    <table class="table">
        <thead>
        <tr>
            <th>Title</th>
            <th>Author</th>
            <th>Pages</th>
            <th>Pages Read</th>
            <th>Your Rating</th>
            <th>Edit</th>
        </tr>
        </thead>
        <tbody>

        @{ var index = 0; }
        @foreach (Book book in Books)
        {
            <tr>
                <td>@book.Title</td>
                <td>@book.Author</td>
                <td>@book.Pages</td>
                <td>@book.PagesRead</td>
                <td>@book.Rating</td>
                <td>
                    <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#editBookModal-@index">
                        Edit
                    </button>

                    <!-- Bootstrap modal -->
                    <div class="modal fade" id="editBookModal-@index">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title">Edit Book</h5>
                                </div>
                                <div class="modal-body">
                                    <EditForm Model="book" OnValidSubmit="@SaveBook">
                                        <InputText class="form-control" id="title" @bind-Value="book.Title" placeholder="Title"/><br/>
                                        <InputText class="form-control" id="author" @bind-Value="book.Author" placeholder="Author"/><br/>
                                        <InputNumber class="form-control" id="pages" @bind-Value="book.Pages" placeholder="Pages"/><br/>
                                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                                        <button type="submit" class="btn btn-primary">Save</button>
                                    </EditForm>
                                </div>
                            </div>
                        </div>
                    </div>
                </td>
            </tr>
            index++;
        }
        </tbody>
    </table>

    <!-- Button trigger modal -->
    <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#createBookModal">
        Create Book
    </button>

    <!-- Modal Structure -->
    <div class="modal fade" id="createBookModal" tabindex="-1" aria-labelledby="createBookModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="createBookModalLabel">Create New Book</h5>
                    <button type="button" class="btn-close" data-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- Modal Form -->
                    <form>
                        <div class="mb-3">
                            <label for="bookTitle" class="form-label">Title</label>
                            <input type="text" class="form-control" id="bookTitle" @bind="newBook.Title" required="required">
                        </div>
                        <div class="mb-3">
                            <label for="bookAuthor" class="form-label">Author</label>
                            <input type="text" class="form-control" id="bookAuthor" @bind="newBook.Author" required="required">
                        </div>
                        <div class="mb-3">
                            <label for="bookPages" class="form-label">Pages</label>
                            <input type="number" class="form-control" id="bookPages" @bind="newBook.Pages">
                        </div>
                        <div class="mb-3">
                            <label for="bookPagesRead" class="form-label">Pages read</label>
                            <input type="number" class="form-control" id="bookPagesRead" @bind="newBook.PagesRead">
                        </div>
                        <div class="mb-3">
                            <label for="bookRating" class="form-label">Rating</label>
                            <input type="number" class="form-control" id="bookRating" @bind="newBook.Rating">
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" data-dismiss="modal" @onclick="() => AddNewBook(newBook)">Save changes</button>
                </div>
            </div>
        </div>
    </div>

@code {

    [Parameter]
    public string Username { get; set; }

    private Book newBook = new();

    public bool Result;
    public ApplicationUser? User { get; set; }
    public ICollection<Book> Books { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(Username))
        {
            AuthenticationState authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
            ClaimsPrincipal claims = authState.User;
            User = await UserManager.GetUserAsync(claims);
            Username = User.UserName;
            Result = true;
        }
        else
        {
            User = await UserManager.FindByNameAsync(Username);
            Result = User is not null;
        }

        if (Result)
        {
            Books = await GetUserBooks();
        }
    }

    private async Task<ICollection<Book>> GetUserBooks()
    {
        var blId = User.BookListId;

        Books = await DbContext.Books
            .Where(b => b.BookListId == blId)
            .ToListAsync();

        return Books;
    }

    private async Task SaveBook()
    {
        await DbContext.SaveChangesAsync();
    }

    private async Task AddNewBook(Book book)
    {
        book.BookListId = User.BookListId;
        DbContext.Books.Add(book);
        await SaveBook();

        Books = await GetUserBooks();
        StateHasChanged();
        newBook = new Book();
    }
}
}