@page "/BookList"
@page "/BookList/{Username}"
@using Microsoft.AspNetCore.Identity
@using BookTracker.App.Models
@using BookTracker.App.Pages.Components
@using BookTracker.App.Services
@using BookTracker.App.Enums

@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject IBookManagementService BookManagementService
@inject IApplicationUserManager ApplicationUserManager

@if (!authorized)
{
    <h1>No User was found or profile is set to private</h1>
}

else
{
    <table class="table">
        <thead>
        <tr>
            <th>Title</th>
            <th>Author</th>
            <th>Pages</th>
            <th>Pages Read</th>
            <th>Your Rating</th>
            <th>Edit</th>
        </tr>
        </thead>
        <tbody>

        @{ var index = 0; }
        @foreach (Book book in Books)
        {
            <tr>
                <td>@book.Title</td>
                <td>@book.Author</td>
                <td>@book.Pages</td>
                <td>@book.PagesRead</td>
                <td>@book.Rating</td>
                <td>
                    @if (editable)
                    {
                        <EditBookModal Index="@index" Book="@book" OnBookEdited="BooksChanged"/>
                    }
                </td>
            </tr>
            index++;
        }
        </tbody>
    </table>

    @if (editable)
    {   
        <AddBookModal User="@User" OnBookAdded="BooksChanged"/>
    }
    
@code {

    [Parameter]
    public string Username { get; set; }

    private bool authorized;
    private bool editable;
    public ApplicationUser? User { get; set; }
    public ICollection<Book> Books { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetUser();
    }

    private async Task GetUser()
    {
        if (string.IsNullOrEmpty(Username))
        {
            User = await GetCurrentUser();   
            Username = User.UserName;

            authorized = true;
            editable = true;
        }
        else
        {
            User = await UserManager.FindByNameAsync(Username);
            await CheckPrivacyStatus(User,await GetCurrentUser());
        }
        if (authorized)
            Books = await BookManagementService.GetUserBooks(User);
    }

    private async Task<ApplicationUser?> GetCurrentUser()
    {
        AuthenticationState authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        return ApplicationUserManager.GetUserByAuthState(authState).Result;
    }

    private async Task CheckPrivacyStatus(ApplicationUser owner, ApplicationUser? currentUser)
    {
        IList<string> roles;

        if (currentUser is not null)
        {
            roles = await ApplicationUserManager.GetUserRole(currentUser);
            
        }
        else
        {
            roles = new List<string>();
        }        
        if (roles.Contains(Roles.Admin.ToString()) || roles.Contains(Roles.Owner.ToString()))
        {
            authorized = true;
            editable = true;
        }
        else
        {
            PrivacyStatus status = owner.PrivacyStatus;

            authorized = status == PrivacyStatus.Public;
        }
    }

    private async Task BooksChanged()
    {
        Books = await BookManagementService.GetUserBooks(User);
        StateHasChanged();
    }
}
}