@page "/BookList"
@page "/BookList/{Username}"
@using Microsoft.AspNetCore.Identity
@using BookTracker.App.Models
@using BookTracker.App.Pages.Components
@using BookTracker.App.Services
@using System.Collections

@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject IBookManagementService BookManagementService
@inject IApplicationUserManager ApplicationUserManager

@if (!_authorized || User is null)
{
    <h1>@_message</h1>
}

else
{
    <table class="table">
        <thead>
        <tr>
            <th>Title</th>
            <th>Author</th>
            <th>Pages</th>
            <th>Pages Read</th>
            <th>Your Rating</th>
            <th>Edit</th>
        </tr>
        </thead>
        <tbody>

        @{ var index = 0; }
        @foreach (Book book in Books)
        {
            <tr>
                <td>@book.Title</td>
                <td>@book.Author</td>
                <td>@book.Pages</td>
                <td>@book.PagesRead</td>
                <td>@book.Rating</td>
                <td>
                    @if (_editable)
                    {
                        <EditBookModal Index="@index" Book="@book" OnBookEdited="BooksChanged"/>
                    }
                </td>
            </tr>
            index++;
        }
        </tbody>
    </table>

    @if (_editable)
    {   
        <AddBookModal User="@Owner" OnBookAdded="BooksChanged"/>
    }
    
@code {

    [Parameter]
    public string Username { get; set; } = string.Empty;

    private bool _authorized;
    private bool _editable;
    public ApplicationUser? User { get; set; }
    public ApplicationUser? Owner { get; set; }
    public ICollection<Book>? Books { get; set; }
    private string _message = "Something went wrong";

    protected override async Task OnInitializedAsync()
    {
        await GetUsers();
        if (Owner != null)
        {
            (_authorized, _editable) = await ApplicationUserManager.GetIsAuthorized(Owner, User);
        }
        if (_authorized)
            await BooksChanged();
    }

    private async Task GetUsers()
    {
        if (string.IsNullOrEmpty(Username))
        {
            User = await GetCurrentUser();
            if (User != null)
            {
                Username = User.UserName!;
                Owner = User;
            }
            else
            {
                _message = "You are not logged in!";
            }
        }
        else
        {
            Owner = await UserManager.FindByNameAsync(Username);
            User = await GetCurrentUser();
            if (Owner is null)
                _message = "No User was found!";
        }
    }

    private async Task<ApplicationUser?> GetCurrentUser()
    {
        AuthenticationState authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        return ApplicationUserManager.GetUserByAuthState(authState).Result;
    }

    public async Task BooksChanged()
    {
        Books = await BookManagementService.GetUserBooks(Owner);
        StateHasChanged();
    }
}
}