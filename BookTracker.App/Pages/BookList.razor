@page "/BookList"
@page "/BookList/{Username}"
@using Microsoft.AspNetCore.Identity
@using BookTracker.App.Models
@using BookTracker.App.Pages.Components
@using BookTracker.App.Services

@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject IBookManagementService BookManagementService
@inject IApplicationUserManager ApplicationUserManager

@if (!Result)
{
    <h1>No User was found or profile is set to private</h1>
}

else
{
    <table class="table">
        <thead>
        <tr>
            <th>Title</th>
            <th>Author</th>
            <th>Pages</th>
            <th>Pages Read</th>
            <th>Your Rating</th>
            <th>Edit</th>
        </tr>
        </thead>
        <tbody>

        @{ var index = 0; }
        @foreach (Book book in Books)
        {
            <tr>
                <td>@book.Title</td>
                <td>@book.Author</td>
                <td>@book.Pages</td>
                <td>@book.PagesRead</td>
                <td>@book.Rating</td>
                <td>
                    <EditBookModal Index="@index" Book="@book" OnBookEdited="BooksChanged"/>
                </td>
            </tr>
            index++;
        }
        </tbody>
    </table>

    <AddBookModal User="@User" OnBookAdded="BooksChanged"/>
    
@code {

    [Parameter]
    public string Username { get; set; }

    public bool Result;
    public ApplicationUser? User { get; set; }
    public ICollection<Book> Books { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(Username))
        {
            AuthenticationState authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
            User = ApplicationUserManager.GetUserByAuthState(authState).Result;
            Username = User.UserName;
            Result = true;
        }
        else
        {
            User = await UserManager.FindByNameAsync(Username);
            Result = User is not null;
        }

        if (Result)
        {
            Books = await BookManagementService.GetUserBooks(User);
        }
    }

    private async Task BooksChanged()
    {
        Books = await BookManagementService.GetUserBooks(User);
        StateHasChanged();
    }
}
}